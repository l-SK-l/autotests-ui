# The name of your workflow as it will appear in the GitHub Actions interface
name: UI tests

# Specify when this workflow should run
on:
  push:
    branches:
      - main  # Run workflow when a commit is made to the main branch
  pull_request:
    branches:
      - main  # Run workflow when a pull request is made to the main branch

# Define all steps to be performed for working with tests
jobs:
  run-tests:
    runs-on: ubuntu-latest  # Specify that tests will run on the latest version of Ubuntu

    steps:
      # 1. Step to clone your repository to the GitHub Actions runner
      - name: Check out repository
        uses: actions/checkout@v4  # Use GitHub Action to clone the repository

      # 2. Step to set up Python on the virtual machine
      - name: Set up Python
        uses: actions/setup-python@v4  # Use GitHub Action to set up Python
        with:
          python-version: '3.11'  # Set Python version to 3.11 (can be changed to another version)

      # 3. Step to install all project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip to the latest version
          pip install -r requirements.txt  # Install dependencies listed in requirements.txt
          playwright install --with-deps  # Install browsers for Playwright (if not already installed)

      # 4. Step to run tests using pytest and generate Allure reports
      - name: Run Playwright tests with pytest and generate Allure results
        env:
          CI: true
          APP_URL: 'https://nikita-filonov.github.io/qa-automation-engineer-ui-course'
          HEADLESS: false
          BROWSERS: '["chromium"]'
          TEST_USER.EMAIL: 'user.name@gmail.com'
          TEST_USER.USERNAME: 'username'
          TEST_USER.PASSWORD: 'password'
          TEST_DATA.IMAGE_PNG_FILE: './testdata/files/image.png'
        run: |
          pytest -m regression --alluredir=allure-results --numprocesses 2  # Run tests marked as "regression" and generate results for Allure

      # 5. Step to restore coverage history from cache
      - name: Restore Coverage history
        uses: actions/cache/restore@v4
        with:
          path: coverage-history.json
          key: coverage-history-${{ github.run_id }}
          restore-keys: |
            coverage-history-

      # 6. Step to generate HTML coverage report and update history
      - name: Generate Coverage report
        run: |
          ui-coverage-tool save-report

      # 7. Step to save coverage history back to cache
      - name: Cache Coverage  history
        if: always()
        uses: actions/cache/save@v4
        with:
          path: coverage-history.json
          key: coverage-history-${{ github.run_id }}

      # 8. Step to upload HTML coverage report as artifact
      - name: Upload Coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      # 9. Step to upload Allure results as artifacts for the next job
      - name: Upload Allure results
        if: always()  # Always upload results, even if tests failed
        uses: actions/upload-artifact@v4  # Upload artifacts to be used in the next job
        with:
          name: allure-results  # Name of the artifact
          path: allure-results  # Path to the results directory

  publish-report:
    if: always()  # Always run this job, even if the previous job failed
    needs: [ run-tests ]  # This job depends on the run-tests job
    runs-on: ubuntu-latest  # Specify that this job will run on the latest version of Ubuntu

    steps:
      # 1. Step to clone the repository to get report history from gh-pages branch
      - name: Check out repository
        uses: actions/checkout@v4  # Clone the repository to get report history
        with:
          ref: gh-pages  # Specify gh-pages branch to get reports
          path: gh-pages  # Specify path to save reports

      # 2. Step to download Allure results from the previous job
      - name: Download Allure results
        uses: actions/download-artifact@v4  # Download artifacts from the previous job
        with:
          name: allure-results  # Name of the artifact to download
          path: allure-results  # Path where to save the downloaded results

      # 3. Step to generate and display the Allure report
      - name: Generates Allure Report with history
        uses: simple-elf/allure-report-action@v1.7  # Use a ready-made solution from GitHub Marketplace to generate the Allure report
        if: always()  # This step also always runs
        with:
          allure_results: allure-results  # Specify directory with test results
          allure_history: allure-history  # Specify directory for Allure report history

      # 4. Step to deploy the Allure report to GitHub Pages so it can be viewed in the browser
      - name: Deploy report to Github Pages
        if: always()  # Always runs, regardless of other steps' success
        uses: peaceiris/actions-gh-pages@v4  # Use GitHub Action to publish the report to GitHub Pages
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Token for authentication on GitHub
          publish_branch: gh-pages  # Specify that the report will be published to the gh-pages branch
          publish_dir: allure-history  # Specify the folder to be published to GitHub Pages